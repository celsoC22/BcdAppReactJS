{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\01-starting-project\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isElevenChars = value => value.trim().length === 11;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    address: true,\n    city: true,\n    MobileNumber: true\n  });\n  const nameInputRef = useRef();\n  const addressInputRef = useRef();\n  const MobileNumberInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredAddress = addressInputRef.current.value;\n    const enteredMobileNumber = MobileNumberInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredAddressIsValid = !isEmpty(enteredAddress);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredMobileNumberIsValid = isElevenChars(enteredMobileNumber);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      address: enteredAddressIsValid,\n      city: enteredCityIsValid,\n      MobileNumber: enteredMobileNumberIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredAddressIsValid && enteredCityIsValid && enteredMobileNumberIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      address: enteredAddress,\n      city: enteredCity,\n      MobileNumber: enteredMobileNumber\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`;\n  const addressControlClasses = `${classes.control} ${formInputsValidity.address ? '' : classes.invalid}`;\n  const mobileNumberControlClasses = `${classes.control} ${formInputsValidity.MobileNumber ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: addressControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"address\",\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"address\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), !formInputsValidity.address && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid Address!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mobileNumberControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"MobileNumber\",\n        children: \"Mobile Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"MobileNumber\",\n        ref: MobileNumberInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), !formInputsValidity.MobileNumber && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid Mobile Number (11 characters long)!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"DpugJeTv8Tq9lyF4TTFzU1lfBOY=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/01-starting-project/src/components/Cart/Checkout.js"],"names":["useRef","useState","classes","isEmpty","value","trim","isElevenChars","length","Checkout","props","formInputsValidity","setFormInputsValidity","name","address","city","MobileNumber","nameInputRef","addressInputRef","MobileNumberInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredAddress","enteredMobileNumber","enteredCity","enteredNameIsValid","enteredAddressIsValid","enteredCityIsValid","enteredMobileNumberIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","addressControlClasses","mobileNumberControlClasses","cityControlClasses","form","streetInputRef","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\r\n\r\nimport classes from './Checkout.module.css';\r\n\r\nconst isEmpty = (value) => value.trim() === '';\r\nconst isElevenChars = (value) => value.trim().length === 11;\r\n\r\nconst Checkout = (props) => {\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    name: true,\r\n    address: true,\r\n    city: true,\r\n    MobileNumber: true,\r\n  });\r\n\r\n  const nameInputRef = useRef();\r\n  const addressInputRef = useRef();\r\n  const MobileNumberInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredAddress = addressInputRef.current.value;\r\n    const enteredMobileNumber = MobileNumberInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredAddressIsValid = !isEmpty(enteredAddress);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n    const enteredMobileNumberIsValid = isElevenChars(enteredMobileNumber);\r\n\r\n    setFormInputsValidity({\r\n      name: enteredNameIsValid,\r\n      address: enteredAddressIsValid,\r\n      city: enteredCityIsValid,\r\n      MobileNumber: enteredMobileNumberIsValid,\r\n    });\r\n\r\n    const formIsValid =\r\n      enteredNameIsValid &&\r\n      enteredAddressIsValid &&\r\n      enteredCityIsValid &&\r\n      enteredMobileNumberIsValid;\r\n\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n\r\n    props.onConfirm({\r\n        name: enteredName,\r\n        address: enteredAddress,\r\n        city: enteredCity,\r\n        MobileNumber: enteredMobileNumber,\r\n      });\r\n  };\r\n\r\n  const nameControlClasses = `${classes.control} ${\r\n    formInputsValidity.name ? '' : classes.invalid\r\n  }`;\r\n  const addressControlClasses = `${classes.control} ${\r\n    formInputsValidity.address ? '' : classes.invalid\r\n  }`;\r\n  const mobileNumberControlClasses = `${classes.control} ${\r\n    formInputsValidity.MobileNumber ? '' : classes.invalid\r\n  }`;\r\n  const cityControlClasses = `${classes.control} ${\r\n    formInputsValidity.city ? '' : classes.invalid\r\n  }`;\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={nameControlClasses}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name' ref={nameInputRef} />\r\n        {!formInputsValidity.name && <p>Please enter a valid name!</p>}\r\n      </div>\r\n      <div className={addressControlClasses}>\r\n        <label htmlFor='address'>Address</label>\r\n        <input type='text' id='address' ref={streetInputRef} />\r\n        {!formInputsValidity.address && <p>Please enter a valid Address!</p>}\r\n      </div>\r\n      <div className={mobileNumberControlClasses}>\r\n        <label htmlFor='MobileNumber'>Mobile Number</label>\r\n        <input type='text' id='MobileNumber' ref={MobileNumberInputRef} />\r\n        {!formInputsValidity.MobileNumber && (\r\n          <p>Please enter a valid Mobile Number (11 characters long)!</p>\r\n        )}\r\n      </div>\r\n      <div className={cityControlClasses}>\r\n        <label htmlFor='city'>City</label>\r\n        <input type='text' id='city' ref={cityInputRef} />\r\n        {!formInputsValidity.city && <p>Please enter a valid city!</p>}\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button type='button' onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}